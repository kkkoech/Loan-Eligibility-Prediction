test_set <- read.csv("data/test.csv")
train_set <- read.csv("data/train.csv")
View(test_set)
View(train_set)
str(test_set
)
str(train_set)
View(train_set)
sum(is.na(train_set))
sum(is.na(test_set))
summary(data)
summary(test_set)
summary(train_set)
#Categorical variables
categorical_vars <- c("Gender","Married","Education","Self_Employed","Property_Area")
eda_vars <- train_set[categorical_vars]
View(eda_vars)
summary(eda_vars)
#Missing observations
#1. Gender?
sum(is.na(train_set$Gender))
#Missing observations?
is.na(train_set)
#Missing observations?
is.na(train_set$Gender)
#Missing observations?
subset(train_set, train_set$Gender == NA)
#Missing observations?
subset(train_set, train_set == NA)
View(test_set)
#Missing observations?
sapply(train_set, function(x){sum(is.na(x))})
sapply(test_set, function(x){sum(is.na(x))})
#Gender has 11 unidentified variables.
train_set[train_set!=c("Male","Female")]
#Gender has 11 unidentified variables.
train_set[train_set$Gender!=c("Male","Female")]
#Gender has 11 unidentified variables.
train_set[train_set$Gender!=c("Male","Female"),]
#Gender has 11 unidentified variables.
train_set[train_set$Gender<-"",]
#Gender has 11 unidentified variables.
train_set[train_set$Gender<-" ",]
#Gender has 11 unidentified variables.
train_set[train_set$Gender==""] <- NA
test_set <- read.csv("data/test.csv")
train_set <- read.csv("data/train.csv")
summary(train_set)
#Missing observations?
sapply(train_set, function(x){sum(is.na(x))})
sapply(test_set, function(x){sum(is.na(x))})
#Gender has 11 unidentified variables.
train_set[train_set$Gender=="",]
#Gender has 11 unidentified variables.
train_set[train_set$Gender<-"",]
#Gender has 11 unidentified variables.
train_set[train_set$Gender<-" ",]
train_set <- read.csv("data/train.csv")
summary(train_set)
#Missing observations?
sapply(train_set, function(x){sum(is.na(x))})
sapply(test_set, function(x){sum(is.na(x))})
#Gender has 11 unidentified variables.
table(train_set$Gender)
#Gender has 13 unidentified variables.
train_set$Gender[train_set$Gender!=c("Male","Female")]
#Gender has 13 unidentified variables.
train_set$Gender[train_set$Gender!=c("Female")]
#Gender has 13 unidentified variables.
train_set$Gender[(train_set$Gender == "Female") & (train_set$Gender == "Male"),]
#Gender has 13 unidentified variables.
train_set$Gender[(train_set$Gender == "Female") & (train_set$Gender == "Male")]
#Gender has 13 unidentified variables.
train_set$Gender[(train_set$Gender == "Female") | (train_set$Gender == "Male")]
#Gender has 13 unidentified variables.
train_set$Gender[(train_set$Gender == "Female") & (train_set$Gender == "Male")]
train_set <- read.csv("data/train.csv")
summary(train_set)
#Missing observations?
sapply(train_set, function(x){sum(is.na(x))})
sapply(test_set, function(x){sum(is.na(x))})
#Gender has 13 unidentified variables.
train_set$Gender[train_set$Gender == c("Female","Male")]
#Gender has 13 unidentified variables.
train_set$Gender[train_set$Gender != c("Female","Male")]
train_set <- read.csv("data/train.csv", comment.char = "")
View(train_set)
train_set <- read.csv("data/train.csv", header = T, na.strings =c(" ","NA"))
train_set <- read.csv("data/train.csv", header = T, na.strings =c("","NA"))
test_set <- read.csv2("data/test.csv")
View(train_set)
View(test_set)
test_set <- read.csv("data/test.csv")
View(test_set)
test_set <- read.csv("data/test.csv", header=T, na.strings = c("","NA"))
#Missing observations?
sapply(train_set, function(x){sum(is.na(x))})
#1. Gender
test_set[is.na(train_set$Gender)]
#1. Gender
test_set[is.na(train_set$Gender),]
train <- read.csv("data/train.csv", header=T, na.strings =c("","NA")) #the na.strings(..) converts blanks to NA's
test <- read.csv("data/test.csv", header=T, na.strings = c("","NA"))
summary(train_set)
#Missing observations?
sapply(train, function(x){sum(is.na(x))})
sapply(test, function(x){sum(is.na(x))})
#1. Gender
test[is.na(train$Gender),]
table(train)
table(train$Gender, train$Dependents)
#Imputing Missing observations using Mice() package
library(mice)
#Imputing Missing observations using Mice() package
library(mice)
#Pattern for missing data
md.pattern(train)
install.packages("VIM")
#Visual pattern for missing data
library(VIM)
aggr(train, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data),
cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr(train, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data),
cex.axis=.9, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr(train, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data),
cex.axis=1.5, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr(train, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data),
cex.axis=.3, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr(train, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data),
cex.axis=.5, gap=1, ylab=c("Histogram of missing data","Pattern"))
aggr(train, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data),
cex.axis=.5, gap=.1, ylab=c("Histogram of missing data","Pattern"))
methods(mice)
#Imputing missing data
tempData <- mice(train,m=5,maxit=50,meth='sample',seed=500)
#Imputing missing data
tempData <- mice(train,m=5,maxit=5,meth='sample') #My seed = is Default
summary(tempData)
train$imp$Gender
View(tempData)
tempData$imp$Gender
#Importing Imputed data
completeData <- complete(tempData,4) #I'm using the 4th one. It's the average of the 5.
View(completeData)
#How do the imputed observations look?
tempData$imp$Gender
tempData$imp$Married
tempData$imp$Dependents
tempData$imp$Self_Employed
tempData$imp$Self_Employed
#Importing Imputed data
completeData <- complete(tempData,4) #I'm using the 4th dataset. Seems like an average of the 5.
View(completeData)
names(train)
View(tempData)
#How does does distribution of imputed data differ from original observations?
xyplot(tempData,Gender ~ Married+Dependents+Self_Employed+LoanAmount
+Loan_Amount_Term+Credit_History,pch=18,cex=1)
#How does does distribution of imputed data differ from original observations?
xyplot(tempData,Gender ~ Married+Dependents+Self_Employed+LoanAmount,pch=18,cex=1)
#Pooling. Fitting a model from each of the imputed dataset and pooling results together
#mice_model <- with(completeData,lm(Loan_Status~Gender+Married+Dependents+Education
#                               +Self_Employed+ApplicantIncome+CoapplicantIncome+LoanAmount+Loan_Amount_Term+
#                                 Credit_History+Property_Area+Loan_Status))
#summary(pool(mice_model))
save.image(file="EnvironmentData.R")
load("EnvironmentData.R")
load("EnvironmentData.R")
load("EnvironmentData.R")
View(completeData)
View(train)
View(test)
View(test)
load("/Users/kevinkoech/Downloads/all_data.RData")
View(train)
View(completeData)
install.packages("rpart")
#Building decision trees with rpart
library(rpart)
names(train)
str(train)
rpart_tree <- rpart(Loan_Status ~ Gender+Married+Dependents+Education
+Self_Employed+ApplicantIncome+CoapplicantIncome+LoanAmount+
Loan_Amount_Term+Credit_History+PropertyArea, data=completeData,
method = "class")
rpart_tree <- rpart(Loan_Status ~ Gender+Married+Dependents+Education
+Self_Employed+ApplicantIncome+CoapplicantIncome+LoanAmount+
Loan_Amount_Term+Credit_History+Property_Area, data=completeData,
method = "class")
plot(rpart_tree)
text(rpart_tree)
install.packages("rattle")
library(rattle)
library(rattle)
install.packages("rattle")
library(rattle)
install.packages("rpart.plot")
install.packages("RColorBrewer")
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
install.packages(rattle)
install.packages("rattle")
fancyRpartPlot(rpart_tree)
fancyRpartPlot(rpart_tree)
#Now let's predict...
rpart_predictions <- predict(rpart_tree, newdata = test, type = "class")
rpart_predictions
str(rpart_predictions)
solution_rpart <- data.frame(Loan_ID <- test$Loan_ID, Loan_Status <- rpart_predictions, row.names = F)
solution_rpart <- data.frame(Loan_ID <- test$Loan_ID, Loan_Status <- rpart_predictions)
View(solution_rpart)
table(solution_rpart)
table(solution_rpart$Loan_Status)
#Using Random Forests
library(randomForest)
rf_model <- randomForest(Loan_Status ~ Gender+Married+Dependents+Education
+Self_Employed+ApplicantIncyome+CoapplicantIncome+LoanAmount+
Loan_Amount_Term+Credit_History+Property_Area, data=completeData,
ntree=1500, importance=T)
rf_model <- randomForest(Loan_Status ~ Gender+Married+Dependents+Education
+Self_Employed+ApplicantIncome+CoapplicantIncome+LoanAmount+
Loan_Amount_Term+Credit_History+Property_Area, data=completeData,
ntree=1500, importance=T)
#Now unto prediction...
rf_prediction <- predict(rf_model,test)
#Model error?
plot(rf_model, ylim=c(0,0.5))
#Model error?
plot(rf_model, ylim=c(0,0.8))
#Model error?
plot(rf_model, ylim=c(0,0.6))
legend("topright",colnames(rf_model$err.rate),col = 1:3,fill = 1:3)
legend("topright",colnames(rf_model$err.rate),col = 1:3,fill = 1:2)
legend("topright",colnames(rf_model$err.rate),col = 1:3,fill = 1:3)
#Variable importance?
rf_importance <- importance(rf_model)
var_importance <- data.frame(Variables=row.names(rf_importance),
Importance=round(rf_importance[,"MeanDecreaseGini"],2))
#Rank variables based on importance
library(dplyr)
rank_importance <- rf_importance%>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
#Rank variables based on importance
library(dplyr)
rank_importance <- rf_importance%>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
#Visualizing relative importance of Variables with ggplot2
library(ggplot2)
library(ggthemes)
ggplot(rank_importance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
ggplot(var_importance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
ggplot(var_importance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
rank_importance <- rf_importance%>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
solution_rf <- data.frame(Loan_ID <- test$Loan_ID, Loan_Status <- rf_prediction)
table(solution_rf$Loan_Status)
table(solution_rpart$Loan_Status)
write.csv(solution_rf,file ="solution.csv",row.names = T)
